---js
{
  getTags: function(collections) {
    const tags = [];
    for (const name in collections) {
      if (!name.startsWith('browser:') && name !== 'all') {
        tags.push(name);
      }
    }
    return tags.sort();
  },
  getBrowsers: function(collections) {
    const browsers = [];
    for (const name in collections) {
      if (name.startsWith('browser:')) {
        browsers.push(name);
      }
    }
    return browsers.sort();
  },
  extractImage: function(content) {
    const match = content.match(/<img src="([^"]+)"/);
    return match ? 'http://devtoolstips.org' + match[1] : 'http://devtoolstips.org/assets/logo.png';
  }
}
---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <link rel="stylesheet" type="text/css" href="/assets/style.css">
    <link rel="icon" href="/assets/favicon.ico" />
    <link rel="manifest" href="/manifest.json">
    <link rel="alternate" type="application/atom+xml" href="https://devtoolstips.org/feed.xml" />
    <meta property="og:title" content="DevTools Tips">
    <meta property="og:url" content="https://devtoolstips.org{{ page.url }}">
    {% if page.url.includes('/tips/') %}
    <meta property="og:image" content="{{ extractImage(content) }}">
    <meta property="og:description" content="{{ title }}">
    {% else %}
    <meta property="og:image" content="http://devtoolstips.org/assets/logo.png">
    <meta property="og:description" content="Discover helpful cross-browser DevTools tips and tricks">
    {% endif %}
    <meta name="twitter:site" content="@_devtoolstips">
    <meta property="og:site_name" content="DevTools Tips">
    <meta name="twitter:card" content="summary">
    <meta name="view-transition" content="same-origin" />
  </head>
  <body>
    <a href="#maincontent" class="skip-link">Skip to main content</a>
    <header>
      <a href="/" class="title">DevTools Tips</a>
      <nav>
        <ul class="header-menu">
          <li><a href="/all/">All tips</a></li>
          <li tabindex="0">Categories
            <ul class="submenu-reveal">
              {%- for tag in getTags(collections) -%}
              <li><a href="/tag/{{ tag }}/">{{ tag }}</a></li>
              {%- endfor -%}
            </ul>
          </li>
          <li tabindex="0">Browsers
            <ul class="submenu-reveal">
              {%- for browser in getBrowsers(collections) -%}
              <li><a href="/browser/{{ browser | processBrowserTagName }}/">{{ browser | processBrowserTagName }}</a></li>
              {%- endfor -%}
            </ul>
          </li>
        </ul>
      </nav>
    </header>
    <main id="maincontent" {% if page.url.includes('/tips/') %}style="view-transition-name:post-{{ page.fileSlug }}"{% endif %}>
      {{ content | safe }}
    </main>
    <footer role="contentinfo">
      <p>Have ideas for other tips? We'd love you to submit them on <a href="https://github.com/captainbrosset/devtools-tips">our GitHub repository!</a> â™¥</p>
      <p>Find us on <a href="https://twitter.com/_devtoolstips">Twitter</a> and <a rel="me" href="https://front-end.social/@devtoolstips">Mastodon</a>.</p>
    </footer>

    {% if env.BUILD_ENV !== "dev" %}
    {# Pixel analytics #}
    <script>
      const pixel = new Image();
      let url = 'https://patrickbrosset.com/pixel.php';
      url += '?t=' + Date.now();
      url += '&url=' + encodeURIComponent(window.location.href);
      pixel.src = url;
    </script>
    {% endif %}

    {% if env.BUILD_ENV !== "dev" %}
    {# Service worker #}
    <script>
      async function registerPeriodicSync() {
        const registration = await navigator.serviceWorker.ready;
        // Check if periodicSync is supported
        if ('periodicSync' in registration) {
          // Request permission
          const status = await navigator.permissions.query({
            name: 'periodic-background-sync',
          });

          if (status.state === 'granted') {
            try {
              // Register new sync every 24 hours
              await registration.periodicSync.register('update-cached-content', {
                minInterval: 24 * 60 * 60 * 1000, // 1 day
              });
              console.log('Periodic background sync registered!');
            } catch(e) {
              console.error(`Periodic background sync failed:\nx${e}`);
            }
          } else {
            console.info('Periodic background sync is not granted.');
          }
        } else {
          console.log('Periodic background sync is not supported.');
        }
      }

      if('serviceWorker' in navigator) {
        // Register the service worker
        navigator.serviceWorker.register('/sw.js', {
          scope: '/'
        });

        // Register the periodic background sync
        registerPeriodicSync();
      }
    </script>
    {% endif %}
  </body>
</html>
